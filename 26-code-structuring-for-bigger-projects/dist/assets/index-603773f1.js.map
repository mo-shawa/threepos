{"version":3,"file":"index-603773f1.js","sources":["../../src/script.ts"],"sourcesContent":["class Robot {\n\tprivate readonly name: string\n\n\tconstructor(name: string) {\n\t\tthis.name = name\n\t\tconsole.log(`I exist`)\n\t}\n\n\tsayHi() {\n\t\tconsole.log(`Hi I am ${this.name}`)\n\t}\n}\n\nconst wallE = new Robot('Wall-E')\nconst ultron = new Robot('Ultron')\nconst astroBoy = new Robot('Astro Boy')\n\nwallE.sayHi()\n\n// import './style.css';\n\n// import GUI from 'lil-gui';\n// import * as THREE from 'three';\n// import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\n// import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\n\n// /**\n//  * Loaders\n//  */\n// const gltfLoader = new GLTFLoader()\n// const textureLoader = new THREE.TextureLoader()\n// const cubeTextureLoader = new THREE.CubeTextureLoader()\n\n// /**\n//  * Base\n//  */\n// // Debug\n// const gui = new GUI()\n// const debugObject = {\n// \tenvMapIntensity: 0.4,\n// }\n\n// // Canvas\n// const canvas = document.querySelector<HTMLCanvasElement>('canvas.webgl')\n\n// if (!canvas) throw new Error('Canvas not found')\n\n// // Scene\n// const scene = new THREE.Scene()\n\n// /**\n//  * Update all materials\n//  */\n// const updateAllMaterials = () => {\n// \tscene.traverse((child) => {\n// \t\tif (\n// \t\t\tchild instanceof THREE.Mesh &&\n// \t\t\tchild.material instanceof THREE.MeshStandardMaterial\n// \t\t) {\n// \t\t\t// child.material.envMap = environmentMap\n// \t\t\tchild.material.envMapIntensity = debugObject.envMapIntensity\n// \t\t\tchild.material.needsUpdate = true\n// \t\t\tchild.castShadow = true\n// \t\t\tchild.receiveShadow = true\n// \t\t}\n// \t})\n// }\n\n// /**\n//  * Environment map\n//  */\n// const environmentMap = cubeTextureLoader.load([\n// \t'/textures/environmentMap/px.jpg',\n// \t'/textures/environmentMap/nx.jpg',\n// \t'/textures/environmentMap/py.jpg',\n// \t'/textures/environmentMap/ny.jpg',\n// \t'/textures/environmentMap/pz.jpg',\n// \t'/textures/environmentMap/nz.jpg',\n// ])\n\n// environmentMap.colorSpace = THREE.SRGBColorSpace\n\n// // scene.background = environmentMap\n// scene.environment = environmentMap\n\n// debugObject.envMapIntensity = 0.4\n// gui\n// \t.add(debugObject, 'envMapIntensity')\n// \t.min(0)\n// \t.max(4)\n// \t.step(0.001)\n// \t.onChange(updateAllMaterials)\n\n// /**\n//  * Models\n//  */\n// let foxMixer: THREE.AnimationMixer\n\n// gltfLoader.load('/models/Fox/glTF/Fox.gltf', (gltf) => {\n// \t// Model\n// \tgltf.scene.scale.set(0.02, 0.02, 0.02)\n// \tscene.add(gltf.scene)\n\n// \t// Animation\n// \tfoxMixer = new THREE.AnimationMixer(gltf.scene)\n// \tconst foxAction = foxMixer.clipAction(gltf.animations[0])\n// \tfoxAction.play()\n\n// \t// Update materials\n// \tupdateAllMaterials()\n// })\n\n// /**\n//  * Floor\n//  */\n// const floorColorTexture = textureLoader.load('textures/dirt/color.jpg')\n// floorColorTexture.colorSpace = THREE.SRGBColorSpace\n// floorColorTexture.repeat.set(1.5, 1.5)\n// floorColorTexture.wrapS = THREE.RepeatWrapping\n// floorColorTexture.wrapT = THREE.RepeatWrapping\n\n// const floorNormalTexture = textureLoader.load('textures/dirt/normal.jpg')\n// floorNormalTexture.repeat.set(1.5, 1.5)\n// floorNormalTexture.wrapS = THREE.RepeatWrapping\n// floorNormalTexture.wrapT = THREE.RepeatWrapping\n\n// const floorGeometry = new THREE.CircleGeometry(5, 64)\n// const floorMaterial = new THREE.MeshStandardMaterial({\n// \tmap: floorColorTexture,\n// \tnormalMap: floorNormalTexture,\n// })\n// const floor = new THREE.Mesh(floorGeometry, floorMaterial)\n// floor.rotation.x = -Math.PI * 0.5\n// scene.add(floor)\n\n// /**\n//  * Lights\n//  */\n// const directionalLight = new THREE.DirectionalLight('#ffffff', 4)\n// directionalLight.castShadow = true\n// directionalLight.shadow.camera.far = 15\n// directionalLight.shadow.mapSize.set(1024, 1024)\n// directionalLight.shadow.normalBias = 0.05\n// directionalLight.position.set(3.5, 2, -1.25)\n// scene.add(directionalLight)\n\n// gui\n// \t.add(directionalLight, 'intensity')\n// \t.min(0)\n// \t.max(10)\n// \t.step(0.001)\n// \t.name('lightIntensity')\n// gui\n// \t.add(directionalLight.position, 'x')\n// \t.min(-5)\n// \t.max(5)\n// \t.step(0.001)\n// \t.name('lightX')\n// gui\n// \t.add(directionalLight.position, 'y')\n// \t.min(-5)\n// \t.max(5)\n// \t.step(0.001)\n// \t.name('lightY')\n// gui\n// \t.add(directionalLight.position, 'z')\n// \t.min(-5)\n// \t.max(5)\n// \t.step(0.001)\n// \t.name('lightZ')\n\n// /**\n//  * Sizes\n//  */\n// const sizes = {\n// \twidth: window.innerWidth,\n// \theight: window.innerHeight,\n// }\n\n// window.addEventListener('resize', () => {\n// \t// Update sizes\n// \tsizes.width = window.innerWidth\n// \tsizes.height = window.innerHeight\n\n// \t// Update camera\n// \tcamera.aspect = sizes.width / sizes.height\n// \tcamera.updateProjectionMatrix()\n\n// \t// Update renderer\n// \trenderer.setSize(sizes.width, sizes.height)\n// \trenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n// })\n\n// /**\n//  * Camera\n//  */\n// // Base camera\n// const camera = new THREE.PerspectiveCamera(\n// \t35,\n// \tsizes.width / sizes.height,\n// \t0.1,\n// \t100\n// )\n// camera.position.set(6, 4, 8)\n// scene.add(camera)\n\n// // Controls\n// const controls = new OrbitControls(camera, canvas)\n// controls.enableDamping = true\n\n// /**\n//  * Renderer\n//  */\n// const renderer = new THREE.WebGLRenderer({\n// \tcanvas: canvas,\n// \tantialias: true,\n// })\n// renderer.toneMapping = THREE.CineonToneMapping\n// renderer.toneMappingExposure = 1.75\n// renderer.shadowMap.enabled = true\n// renderer.shadowMap.type = THREE.PCFSoftShadowMap\n// renderer.setClearColor('#211d20')\n// renderer.setSize(sizes.width, sizes.height)\n// renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n\n// /**\n//  * Animate\n//  */\n// const clock = new THREE.Clock()\n// let previousTime = 0\n\n// const tick = () => {\n// \tconst elapsedTime = clock.getElapsedTime()\n// \tconst deltaTime = elapsedTime - previousTime\n// \tpreviousTime = elapsedTime\n\n// \t// Update controls\n// \tcontrols.update()\n\n// \t// Fox animation\n// \tif (foxMixer) {\n// \t\tfoxMixer.update(deltaTime)\n// \t}\n\n// \t// Render\n// \trenderer.render(scene, camera)\n\n// \t// Call tick again on the next frame\n// \twindow.requestAnimationFrame(tick)\n// }\n\n// tick()\n"],"names":["Robot","name","wallE"],"mappings":"ssBAAA,MAAMA,CAAM,CAGX,YAAYC,EAAc,CACzB,KAAK,KAAOA,EACZ,QAAQ,IAAI,SAAS,CACtB,CAEA,OAAQ,CACP,QAAQ,IAAI,WAAW,KAAK,IAAI,EAAE,CACnC,CACD,CAEA,MAAMC,EAAQ,IAAIF,EAAM,QAAQ,EACjB,IAAIA,EAAM,QAAQ,EAChB,IAAIA,EAAM,WAAW,EAEtCE,EAAM,MAAM"}